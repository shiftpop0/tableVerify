import random

import matplotlib.pyplot as plt
import numpy as np

# Hs=1000,LS=100,m=2下的数据结果
# 数据
x=[]
for i in range(1, 145):
    x.append(i)

y_ingress = [45.92/100, 45.91/100, 38.93/100, 53.91/100, 40.94/100, 56.93/100, 59.92/100, 38.95/100, 44.91/100, 12.98/100, 44.94/100, 52.60/100, 53.91/100, 50.91/100, 41.92/100, 45.88/100, 47.92/100, 37.93/100, 43.95/100, 35.96/100, 45.95/100, 47.95/100, 43.91/100, 53.93/100, 49.87/100, 47.92/100, 34.98/100, 45.95/100, 20.97/100, 28.96/100, 46.92/100, 45.95/100, 38.95/100, 28.95/100, 12.00/100, 42.92/100, 46.92/100, 43.98/100, 45.94/100, 45.94/100, 42.92/100, 41.92/100, 32.96/100, 34.94/100, 37.99/100, 46.98/100, 35.95/100, 32.95/100, 45.99/100, 32.95/100, 41.93/100, 41.92/100, 44.95/100, 48.98/100, 41.94/100, 47.94/100, 35.96/100, 39.92/100, 42.98/100, 26.95/100, 44.93/100, 46.94/100, 29.96/100, 36.96/100, 40.99/100, 47.95/100, 44.93/100, 49.94/100, 30.94/100, 12.98/100, 12.99/100, 14.98/100, 12.98/100, 17.97/100, 48.99/100, 54.90/100, 44.92/100, 54.91/100, 48.94/100, 44.95/100, 41.91/100, 49.99/100, 46.92/100, 49.93/100, 46.98/100, 43.92/100, 50.91/100, 52.97/100, 29.99/100, 39.95/100, 47.93/100, 42.93/100, 39.97/100, 40.96/100, 44.94/100, 39.95/100, 42.95/100, 48.94/100, 28.95/100, 44.93/100, 43.91/100, 55.90/100, 47.94/100, 24.98/100, 40.94/100, 50.90/100, 50.98/100, 42.95/100, 38.93/100, 43.93/100, 50.92/100, 46.98/100, 37.93/100, 36.94/100, 31.95/100, 57.91/100, 54.93/100, 45.95/100, 35.97/100, 44.91/100, 47.94/100, 51.91/100, 45.94/100, 41.96/100, 51.92/100, 38.95/100, 29.97/100, 42.94/100, 46.99/100, 42.95/100, 49.90/100, 43.94/100, 44.95/100, 48.93/100, 50.94/100, 52.94/100, 37.96/100, 41.95/100, 54.92/100, 37.95/100]
for i in range(len(x) - len(y_ingress)):
    y_ingress.append(random.randint(1, 100)/10000)

y_wang = [35.98/100, 35.94/100, 34.95/100, 35.95/100, 36.94/100, 33.97/100, 34.96/100, 33.95/100, 34.93/100, 33.94/100, 33.94/100, 33.96/100, 33.98/100, 34.95/100, 36.00/100, 36.94/100, 33.95/100, 35.96/100, 33.96/100, 35.93/100, 34.95/100, 35.96/100, 34.96/100, 33.98/100, 35.96/100, 34.95/100, 34.96/100, 32.98/100, 33.94/100, 34.96/100, 33.96/100, 33.96/100, 32.96/100, 32.95/100, 33.93/100, 33.99/100, 33.96/100, 33.97/100, 33.96/100, 33.96/100, 34.96/100, 33.98/100, 34.97/100, 34.93/100, 33.96/100, 35.95/100, 34.95/100, 33.93/100, 33.96/100, 33.95/100, 31.98/100, 34.96/100, 32.96/100, 32.96/100, 35.96/100, 35.95/100, 34.96/100, 33.96/100, 35.95/100, 33.94/100, 32.97/100, 35.94/100, 32.94/100, 40.97/100, 36.94/100, 35.94/100, 35.96/100, 35.95/100, 33.96/100, 35.94/100, 34.96/100, 35.95/100, 34.93/100, 33.96/100, 34.95/100, 34.96/100, 34.99/100, 34.94/100, 42.92/100, 39.95/100, 35.96/100, 33.96/100, 34.96/100, 37.97/100, 35.00/100, 32.95/100, 34.96/100, 32.96/100, 32.95/100, 32.95/100, 36.96/100, 32.96/100, 34.95/100, 35.94/100, 33.96/100, 34.98/100, 33.96/100, 33.96/100, 33.96/100, 35.94/100, 35.93/100, 30.96/100, 35.95/100, 31.96/100, 35.99/100, 37.93/100]
for i in range(len(x) - len(y_wang)):
    y_wang.append(random.randint(1, 100)/10000)

y_bit1 = [19.98/100, 17.97/100, 17.98/100, 17.99/100, 18.97/100, 18.98/100, 18.97/100, 17.97/100, 18.98/100, 18.98/100, 18.98/100, 17.98/100, 18.97/100, 17.98/100, 20.99/100, 17.98/100, 19.97/100, 18.98/100, 19.98/100, 18.99/100, 18.98/100, 20.97/100, 18.98/100, 17.98/100, 17.98/100, 19.98/100, 18.97/100, 19.00/100, 18.98/100, 17.97/100, 18.97/100, 17.98/100, 18.96/100, 21.97/100, 17.97/100, 21.97/100, 21.97/100, 19.97/100, 18.96/100, 19.98/100, 18.97/100, 17.96/100, 19.98/100, 18.99/100, 19.97/100, 19.97/100, 19.96/100, 20.96/100, 20.98/100, 20.98/100, 21.97/100, 20.97/100, 19.98/100, 19.98/100, 22.97/100, 19.98/100, 20.97/100, 20.97/100, 21.97/100, 21.97/100, 21.97/100, 20.98/100, 20.98/100, 21.97/100, 22.97/100, 20.96/100, 20.98/100, 17.98/100, 20.98/100, 22.97/100, 20.96/100, 22.97/100, 20.97/100, 20.96/100, 22.97/100, 20.97/100, 21.00/100, 21.97/100, 18.98/100, 18.97/100, 20.97/100, 20.97/100, 20.99/100, 19.97/100, 19.97/100, 22.98/100, 20.98/100, 20.97/100, 21.97/100, 19.98/100, 19.99/100, 19.97/100, 20.98/100, 19.97/100, 20.96/100, 20.96/100, 18.97/100, 20.96/100, 21.97/100]
for i in range(len(x) - len(y_bit1)):
    y_bit1.append(random.randint(1, 100)/10000)

y_bit2 = [17.98/100, 18.98/100, 20.98/100, 18.97/100, 18.98/100, 18.97/100, 18.96/100, 19.97/100, 17.98/100, 17.98/100, 19.96/100, 17.97/100, 18.96/100, 18.98/100, 19.97/100, 17.99/100, 18.97/100, 18.98/100, 18.96/100, 17.98/100, 18.97/100, 17.98/100, 19.97/100, 18.97/100, 18.97/100, 20.98/100, 19.99/100, 18.98/100, 19.97/100, 18.96/100, 20.97/100, 19.97/100, 20.96/100, 19.97/100, 18.97/100, 18.98/100, 18.97/100, 18.97/100, 18.98/100, 19.97/100, 18.97/100, 19.97/100, 19.97/100, 18.96/100, 19.97/100, 18.96/100, 19.98/100, 19.98/100, 19.97/100, 20.98/100, 19.97/100, 18.99/100, 19.98/100, 17.98/100, 18.98/100, 20.96/100, 19.97/100, 18.97/100, 19.98/100, 20.00/100, 17.98/100, 19.98/100, 19.98/100, 18.98/100, 19.96/100, 19.98/100, 19.98/100, 19.97/100, 19.98/100, 20.00/100, 20.98/100, 19.97/100, 18.97/100, 18.98/100, 19.97/100, 19.96/100, 19.98/100, 18.97/100, 20.97/100, 19.97/100, 18.98/100, 18.97/100, 19.98/100, 18.97/100, 19.98/100, 17.98/100, 19.98/100, 17.99/100, 18.98/100, 20.97/100, 19.97/100, 19.97/100, 19.98/100, 18.98/100, 20.96/100, 18.98/100, 20.97/100, 19.97/100, 18.98/100]
for i in range(len(x) - len(y_bit2)):
    y_bit2.append(random.randint(1, 100)/10000)

y_bit3 = [19.98/100, 17.97/100, 20.98/100, 19.98/100, 19.97/100, 18.98/100, 19.98/100, 18.98/100, 18.96/100, 20.96/100, 19.97/100, 16.99/100, 18.96/100, 18.96/100, 20.96/100, 17.98/100, 19.97/100, 19.98/100, 19.98/100, 18.98/100, 20.96/100, 18.98/100, 18.98/100, 18.97/100, 18.98/100, 18.98/100, 19.98/100, 19.97/100, 18.97/100, 17.96/100, 19.98/100, 18.98/100, 18.96/100, 18.98/100, 18.97/100, 19.98/100, 20.96/100, 17.98/100, 19.99/100, 20.98/100, 19.98/100, 17.97/100, 19.98/100, 18.97/100, 20.98/100, 19.00/100, 18.97/100, 19.98/100, 19.97/100, 19.97/100, 19.98/100, 18.98/100, 18.97/100, 19.97/100, 20.99/100, 18.98/100, 20.97/100, 18.98/100, 20.97/100, 18.97/100, 19.98/100, 19.97/100, 19.98/100, 18.99/100, 19.96/100, 18.97/100, 20.97/100, 19.98/100, 19.96/100, 20.99/100, 20.00/100, 20.97/100, 18.98/100, 19.97/100, 19.98/100, 19.98/100, 18.98/100, 20.97/100, 19.98/100, 20.97/100, 18.97/100, 19.98/100, 18.97/100, 18.98/100, 19.96/100, 20.96/100, 19.99/100, 19.97/100, 20.97/100, 19.98/100, 18.98/100, 18.96/100, 19.97/100, 19.98/100, 20.97/100, 18.97/100, 19.99/100, 18.98/100, 18.99/100]
for i in range(len(x) - len(y_bit3)):
    y_bit3.append(random.randint(1, 100)/10000)


plt.figure(figsize=(10, 7), linewidth=6)
# plt.errorbar(x, y, yerr=[y_err_lower, y_err_upper], fmt='_', markersize=4, capsize=5, color='b', ecolor='r', elinewidth=2, capthick=2, label='Data with Error Bars')
plt.plot(x, y_bit1, markersize=4, linestyle='solid', color='black', label='bit-based switch1')
plt.plot(x, y_bit2, markersize=4, linestyle='dashed', color='r', label='bit-based switch2')
plt.plot(x, y_bit3, markersize=4, linestyle='dashdot', color='brown', label='bit-based switch3')

plt.plot(x, y_ingress, marker='s', markersize=6, linestyle='-', color='blue', label='ingress-based')
plt.plot(x, y_wang, marker='v', markersize=6, linestyle='-', color='purple', label='rule-based')

# plt.xticks(fontsize=14, fontweight='bold')
plt.yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6,0.7], ['10%', '20%', '30%', '40%', '50%', '60%', '70%'], fontsize=18, fontweight='bold')

# 设置图表标题和标签
plt.xlabel('Time(seconds)', fontsize=20, fontweight='bold')
plt.ylabel('CPU Utilization(%)', fontsize=20, fontweight='bold')

# 获取图的边框对象并设置粗细
for spine in plt.gca().spines.values():
    spine.set_linewidth(2)  # 设置边框粗细为2
# 添加图例
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.gca().set_facecolor(None)
plt.savefig('C:/Users/Administrator/OneDrive/吴欣泽/Paper/数据中心版/Fig1/'+'cpuUse.png', transparent=True)
plt.show()
